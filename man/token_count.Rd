% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/token_count.R
\name{token_count}
\alias{token_count}
\title{Count Fixed Tokens}
\usage{
token_count(text.var, grouping.var = NULL, token.list, stem = FALSE,
  keep.punctuation = TRUE, group.names, ...)
}
\arguments{
\item{text.var}{The text string variable.}

\item{grouping.var}{The grouping variable(s).  Default \code{NULL} generates
one word list for all text.  Also takes a single grouping variable or a list
of 1 or more grouping variables.  If \code{TRUE} an \code{id} variable is
used with a \code{seq_along} the \code{text.var}.}

\item{token.list}{A list of named character vectors of tokens.  Search will
combine the counts for tokens supplied that are in the same vector.  Tokens
are defined as  \code{"^([a-z' ]+|[0-9.]+|[[:punct:]]+)$"} and should
conform to this standard.}

\item{stem}{logical.  If \code{TRUE} the search is done after the terms have
been stemmed.}

\item{keep.punctuation}{logical.  If \code{TRUE} the punctuation marks are
considered as tokens.}

\item{group.names}{A vector of names that corresponds to group.  Generally
for internal use.}

\item{\ldots}{Other arguments passed to \code{\link[gofastr]{q_dtm}}.}
}
\value{
Returns a \code{\link[dplyr]{tbl_df}} object of term counts by
grouping variable.
}
\description{
Count the occurrence of tokens within a vector of strings.  This function
differs from \code{\link[termco]{term_count}} in that \code{term_count} is
regex based, allowing for fuzzy matching.  This function only searches for
lower cased tokens (words, number sequences, or punctuation).  This counting
function is faster but less flexible.
}
\examples{
token_list <- list(
    person = c('sam', 'i')   ,
    place = c('here', 'house'),
    thing = c('boat', 'fox', 'rain', 'mouse', 'box', 'eggs', 'ham'),
    no_like = c('not like')
)

token_count(sam_i_am, grouping.var = TRUE, token.list = token_list)
token_count(sam_i_am, grouping.var = NULL, token.list = token_list)

\dontrun{
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse, lexicon, textshape)

token_list <- lexicon::nrc_emotions \%>\%
    textshape::column_to_rownames() \%>\%
    t() \%>\%
    textshape::as_list()

presidential_debates_2012 \%>\%
     with(token_count(dialogue, TRUE, token_list))

presidential_debates_2012 \%>\%
     with(token_count(dialogue, list(person, time), token_list))
}
}

