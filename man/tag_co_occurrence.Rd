% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tag_co_occurrence.R
\name{tag_co_occurrence}
\alias{tag_co_occurrence}
\title{Explore Tag Co-Occurrence}
\usage{
tag_co_occurrence(x, ...)
}
\arguments{
\item{x}{A \code{\link[termco]{term_count}} object.}

\item{\ldots}{ignored.}
}
\value{
Returns a list of:
\item{ave_tag}{A 2 column data.frame of tags and the average number of other tags that co-occur with it.}
\item{cor}{A min-max scaled correlation matrix between tags; diagonals set to 0.}
\item{adjacency}{An adjacency matrix between tags.}
\item{min_max_adjacency}{A min-max scaled adjacency matrix between tags; diagonals set to 0.}
\item{node_size}{The diagonals from the adjacency matrix; the number of times a tag occurred.}
}
\description{
Explore tag co-occurrence.  The resulting list comes with a plot method that
allows the user to use a network graph to view the connections between
tags as well as the average number of other tags that co-occur with each of
the regex tags.  This can provide information regarding the discriminatory
power of each regex that corresponds to a tag.
}
\examples{
## Example 1
regs <- frequent_terms(presidential_debates_2012[["dialogue"]])[[1]]
regs <- setNames(as.list(regs), regs)

model <- with(presidential_debates_2012,
    term_count(dialogue, TRUE, regs)
)

x <- tag_co_occurrence(model)
names(x)
setNames(
    lapply(names(x), function(a) {if(is.matrix(x[[a]])){ round(x[[a]], 2)} else { x[[a]] }}),
    names(x)
)
heatmap(x[["cor"]])
heatmap(x[["min_max_adjacency"]])
barplot(sort(x[["node_size"]], TRUE), las=2)
barplot(setNames(x[["ave_tag"]][[2]], x[["ave_tag"]][[1]]), las=2)

## Note. Restart the graphics device between plot calls if working
##       interactively. See `?plot.tag_co_occurrence` for details.
plot(x)
plot(x, cor=FALSE)
plot(x, min.edge.cutoff = .1, node.color = "#1CDB4F")
plot(x, min.edge.cutoff = .2, node.color = "gold", digits = 3)
plot(x, bar = TRUE)

\dontrun{
##===============================================
## Interactive chord diagram and network graph of
## tag co-occurrence
##===============================================

## Load Required Add-on Packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(igraph, qrage)
pacman::p_load_gh("mattflor/chorddiag", "trinker/textshape")

## Matrix Manipulation Function
remove_diags <- function(mat, rm.lower = FALSE, order = TRUE, ...) {
    diag(mat) <- 0
    if (isTRUE(rm.lower)) mat[lower.tri(mat)] <- 0
    if (order) {
        ord <- order(rowSums(mat))
        mat <- mat[ord, ord]
    }
    mat
}

##--------------
## Chord Diagram
##--------------
chorddiag::chorddiag(
    remove_diags(x[["adjacency"]]),
    margin = 150,
    showTicks =FALSE,
    groupnamePadding = 5,
    groupThickness = .05,
    chordedgeColor = NA
)

##--------------
## Network Graph
##--------------
graph <- igraph::graph.adjacency(
    remove_diags(x[["adjacency"]], order=FALSE),
    weighted = TRUE
)

linkdf <- stats::setNames(get.data.frame(graph), c("source", "target", "value"))

qrage::qrage(
    links = linkdf,
    nodeValue = textshape::bind_vector(x[['node_size']]),
    cut = 0.1
)
}

## Example 2
regs2 <- frequent_terms(presidential_debates_2012[["dialogue"]], n=50)[[1]]
regs2 <- setNames(as.list(regs2), regs2)

model2 <- with(presidential_debates_2012,
    term_count(dialogue, TRUE, regs2)
)

x2 <- tag_co_occurrence(model2)
plot(x2)
plot(x2, bar = FALSE, min.edge.cutoff = .13)
plot(x2, bar = FALSE, min.edge.cutoff = .18, node.color = "#ead453")
plot(x2, node.weight = 3)
plot(x2, edge.weight = 20, node.weight = 5)

plot(x2, edge.color = "gray80", node.color = "grey50", font.color = "white",
    background.color = "black")

## Small Number of Tags Example
plot(tag_co_occurrence(markers), node.weight = 30)
}
\author{
Steve T. Simpson and Tyler Rinker <tyler.rinker@gmail.com>.
}

