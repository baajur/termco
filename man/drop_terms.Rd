% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/drop_terms.R
\name{drop_terms}
\alias{drop_terms}
\alias{drop_terms_regex}
\alias{drop_terms_fixed}
\alias{keep_terms_regex}
\alias{keep_terms_fixed}
\alias{keep_terms}
\title{Drop Terms from a Term List}
\usage{
drop_terms(x, drop.terms, fixed = TRUE, negate = FALSE, ...)

drop_terms_regex(x, drop.terms, negate = FALSE, ...)

drop_terms_fixed(x, drop.terms, negate = FALSE, ...)

keep_terms_regex(x, drop.terms, negate = TRUE, ...)

keep_terms_fixed(x, drop.terms, negate = TRUE, ...)

keep_terms(x, drop.terms, fixed = TRUE, negate = TRUE, ...)
}
\arguments{
\item{x}{A term list.}

\item{drop.terms}{A vector of terms to drop or a regex.}

\item{fixed}{logical.  If \code{FALSE} then \code{drop.terms} may be a regex.}

\item{negate}{logical.  If \code{TRUE} then the \code{drop.terms} will be kept.}

\item{\ldots}{If \code{fixed = FALSE} then other terms passed to
\code{search_term_which}, otherwise, ignored.}
}
\value{
Returns a term list
}
\description{
\code{drop_terms} Usage allows the user to explore/iterate on a term list and
drop terms prior prior to \code{term_count} use without manually editing an
external term list file.

\code{drop_terms_regex} Contol \code{fixed} parameter with function name, in
 this case, \code{drop.terms} is matched via regex.

\code{drop_terms_fixed} Contol \code{fixed} parameter with function name, in
 this case, \code{drop.terms} is matched via exactly.

\code{keep_terms_regex} Negated version of \code{drop_terms_regex}.

\code{keep_terms_fixed} Negated version of \code{drop_terms_fixed}.

\code{keep_terms} Negated version of \code{drop_terms}.
}
\examples{
## Single level term list
discoure_markers <- list(
    response_cries = c("\\\\boh", "\\\\bah", "\\\\baha", "\\\\bouch", "yuk"),
    back_channels = c("uh[- ]huh", "uhuh", "yeah"),
    summons = "hey",
    justification = "because"
)
drop_terms(discoure_markers, 'response_cries')
drop_terms(discoure_markers, c('summons', 'response_cries'))
drop_terms_regex(discoure_markers, 'on')

## Hierarchical term list
trpl_list <- list(
    list(
        response_cries = c("\\\\boh", "\\\\bah", "\\\\baha", "\\\\bouch", "yuk"),
        back_channels = c("uh[- ]huh", "uhuh", "yeah"),
        summons = "hey",
        justification = "because"
    ),
    list(summons ='the'),
    list(summons = 'it', justification = 'ed\\\\s')
)

drop_terms(trpl_list, 'response_cries')
drop_terms(trpl_list, c('summons', 'response_cries'))
drop_terms(trpl_list, c('summons', 'response_cries', 'justification'))
drop_terms_regex(trpl_list, '[ln]s')
keep_terms_regex(trpl_list, '[ln]s')
}
